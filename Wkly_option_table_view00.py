import sys
import json
from datetime import datetime, timedelta
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
    QTableWidget, QTableWidgetItem
)
from PyQt5.QtCore import QTimer
from PyQt5.QtGui import QColor
from Comms_Class import InitPlusCheck, CpFutureMst, CpOptionMst, get_current_price


class OptionViewer(QWidget):
    # ÌÉÄÏù¥Î®∏ Í¥ÄÎ†® Î≥ÄÏàò ÏÑ†Ïñ∏
    UPDATE_INTERVAL = 170  # Í∞ÄÍ≤© ÏóÖÎç∞Ïù¥Ìä∏ ÌÉÄÏù¥Î®∏ Í∞ÑÍ≤© (Î∞ÄÎ¶¨Ï¥à)
    FLASH_DURATION = 180   # ÍπúÎπ°ÏûÑ Ìö®Í≥º ÏßÄÏÜç ÏãúÍ∞Ñ (Î∞ÄÎ¶¨Ï¥à)

    def __init__(self):
        super().__init__()
        self.setWindowTitle("ÏòµÏÖò ÏΩîÎìú Î∞è Í∞ÄÍ≤© Î≥¥Í∏∞")
        self.setGeometry(140, 70, 900, 900)

        main_layout = QVBoxLayout(self)
        header_layout = QHBoxLayout()
        tables_layout = QHBoxLayout()

        self.label = QLabel("üìà ÏòµÏÖò ÏΩîÎìú Î∞è Í∞ÄÍ≤©")
        self.start_button = QPushButton("ÏòµÏÖò Í∞ÄÍ≤© Î≥¥Í∏∞")
        self.start_button.clicked.connect(self.start_fetching)

        header_layout.addWidget(self.label)
        header_layout.addStretch()
        header_layout.addWidget(self.start_button)

        self.call_table = QTableWidget()
        self.call_table.setColumnCount(2)
        self.call_table.setHorizontalHeaderLabels(["ÏΩú ÏòµÏÖò", "ÌòÑÏû¨Í∞Ä"])
        self.call_prices = {}  # ÏΩú ÏòµÏÖò ÏΩîÎìúÎ≥Ñ Ïù¥Ï†Ñ Í∞ÄÍ≤© Ï†ÄÏû•

        self.put_table = QTableWidget()
        self.put_table.setColumnCount(2)
        self.put_table.setHorizontalHeaderLabels(["Ìíã ÏòµÏÖò", "ÌòÑÏû¨Í∞Ä"])
        self.put_prices = {}  # Ìíã ÏòµÏÖò ÏΩîÎìúÎ≥Ñ Ïù¥Ï†Ñ Í∞ÄÍ≤© Ï†ÄÏû•

        tables_layout.addWidget(self.call_table)
        tables_layout.addWidget(self.put_table)

        main_layout.addLayout(header_layout)
        main_layout.addLayout(tables_layout)

        self.option_mst = CpOptionMst()
        self.call_codes = []
        self.put_codes = []
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.update_prices)

        # Ï¥àÍ∏∞ Ïù∏Îç±Ïä§ ÏÑ§Ï†ï
        self.current_index = 0
        self.total_codes = []

    def start_fetching(self):
        self.call_table.setRowCount(0)
        self.put_table.setRowCount(0)
        self.call_prices = {}
        self.put_prices = {}

        # ÏÑ†Î¨º ÌòÑÏû¨Í∞Ä Í∞ÄÏ†∏Ïò§Í∏∞
        future_code = "101W6000"
        future_item = {}
        CpFutureMst().request(future_code, future_item)
        current_price_full = future_item.get("ÌòÑÏû¨Í∞Ä", 0)
        current_price_rounded = round(current_price_full, 2)
        self.label.setText(f"üìà ÏòµÏÖò ÏΩîÎìú Î∞è Í∞ÄÍ≤© - Í∏∞Ï§ÄÍ∞Ä: {current_price_rounded}")

        try:
            with open("atm_optioncode.json", "r") as f:
                option_data = json.load(f)
                base_code = option_data.get("base", "")
                call_base = option_data.get("call_code", "")
                put_base = option_data.get("put_code", "")

                if base_code:
                    # ÌòÑÏû¨Í∞Ä Í∏∞Ï§ÄÏúºÎ°ú Í∞ÄÍπåÏö¥ 5Í∞ú ÌñâÏÇ¨Í∞Ä ÏΩú/Ìíã ÏòµÏÖò ÏΩîÎìú ÏÉùÏÑ± (ÏòàÏãú)
                    num_to_generate = 5
                    closest_strike = round(current_price_rounded / 2.5) * 2.5
                    for i in range(-num_to_generate, num_to_generate + 1):
                        strike = closest_strike + i * 2.5
                        strike_int = int(strike)
                        strike_str = str(strike_int).zfill(3)
                        call_code = f"{call_base}{strike_str}"
                        put_code = f"{put_base}{strike_str}"
                        self.call_codes.append(call_code)
                        self.put_codes.append(put_code)
                        self.call_prices[call_code] = None  # Ï¥àÍ∏∞ Í∞ÄÍ≤© NoneÏúºÎ°ú ÏÑ§Ï†ï
                        self.put_prices[put_code] = None  # Ï¥àÍ∏∞ Í∞ÄÍ≤© NoneÏúºÎ°ú ÏÑ§Ï†ï

                    # Ï§ëÎ≥µ Ï†úÍ±∞ Î∞è Ï†ïÎ†¨
                    self.call_codes = sorted(list(set(self.call_codes)))
                    self.put_codes = sorted(list(set(self.put_codes)), reverse=True)

                    self.total_codes = self.call_codes + self.put_codes

                    # ÌÖåÏù¥Î∏î Ï¥àÍ∏∞ ÏÑ∏ÌåÖ (ÏΩîÎìúÎßå)
                    self.call_table.setRowCount(len(self.call_codes))
                    for i, code in enumerate(self.call_codes):
                        self.call_table.setItem(i, 0, QTableWidgetItem(code))
                        self.call_table.setItem(i, 1, QTableWidgetItem("0.00"))

                    self.put_table.setRowCount(len(self.put_codes))
                    for i, code in enumerate(self.put_codes):
                        self.put_table.setItem(i, 0, QTableWidgetItem(code))
                        self.put_table.setItem(i, 1, QTableWidgetItem("0.00"))

                    # ÌÉÄÏù¥Î®∏ ÏãúÏûë
                    self.update_timer.start(self.UPDATE_INTERVAL)
                else:
                    self.label.setText("‚ùå atm_optioncode.json ÌååÏùºÏóê base ÏΩîÎìúÍ∞Ä ÏóÜÏäµÎãàÎã§.")

        except FileNotFoundError:
            self.label.setText("‚ùå atm_optioncode.json ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
        except json.JSONDecodeError:
            self.label.setText("‚ùå atm_optioncode.json ÌååÏùº ÌòïÏãùÏù¥ ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§.")

    def update_prices(self):
        if not self.total_codes:
            return

        if self.current_index >= len(self.total_codes):
            self.current_index = 0

        code = self.total_codes[self.current_index]
        try:
            price = get_current_price(code)
            if code.startswith("2"):  # ÏΩú ÏòµÏÖò
                if code in self.call_prices and self.call_prices[code] != price:
                    try:
                        idx = self.call_codes.index(code)
                        self.update_cell_with_flash(self.call_table, idx, 1, price)
                    except ValueError:
                        pass
                self.call_prices[code] = price
            elif code.startswith("3"):  # Ìíã ÏòµÏÖò
                if code in self.put_prices and self.put_prices[code] != price:
                    try:
                        idx = self.put_codes.index(code)
                        self.update_cell_with_flash(self.put_table, idx, 1, price)
                    except ValueError:
                        pass
                self.put_prices[code] = price
        except Exception:
            pass  # Í∞ÄÍ≤© Ï°∞Ìöå Ïã§Ìå® Ïãú Ï≤òÎ¶¨ (ÌòÑÏû¨Îäî Î¨¥Ïãú)

        self.current_index += 1

    def update_cell_with_flash(self, table, row, col, price):
        item = QTableWidgetItem(f"{price:.2f}")
        item.setBackground(QColor("yellow"))
        table.setItem(row, col, item)

        def reset_background():
            item.setBackground(QColor("white"))
            table.setItem(row, col, item)

        QTimer.singleShot(self.FLASH_DURATION, reset_background)


if __name__ == "__main__":
    if not InitPlusCheck():
        print("‚ùå PLUS Ï¥àÍ∏∞Ìôî Ïã§Ìå®")
        sys.exit()

    app = QApplication(sys.argv)
    viewer = OptionViewer()
    viewer.show()
    sys.exit(app.exec_())